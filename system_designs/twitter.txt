* Feature set
  Tweeting
  Timeline
   - User (tweets and retweets of user)
   - Home (we will see all tweets to whom we follow)
  Following
  Search a tweet
  advertisements

* API
  - Post a tweet
    postTweet(user_id, )
  - Get Home Timeline
  - search a tweet
* Data Model
	Que: which Database and why

  User - name, email, dob, registration date
  Tweet - user_id, title, content

  user will have many tweets

* Following Model
	users has_many :followers , class_name: 'Following', foreign_key: 'following_id' 
	users has_many :followings , class_name: 'Following', foreign_key: 'follower_id' 

	Following Table
	follower_id, following_id
	belongs_to :follower, class_name: 'User'
	belongs_to :following, class_name: 'User'


* How to serve feeds on user's timeline
	if user follows many people, then fetching feeds and rendering them can be costly.
	Sol: as scroll is there, so we dont need to fetch all feeds at once. We can fetch N feeds.

	Query would be
	Give me all tweets to whom I follow and merge them in cronological order. This is very huge select query which happens every time when someone opens twitter. 

	Availibility more matters 
	so, as soon as user post/put tweet, Load Balancer will distribute them in 3 redis(in RAM, not in disk) cluster. Redis machines have lists for each user. Obviously there are many redis machines, here load balancer do hash lookups to find correct redis machine for followers.

	Now, when user do GET request,
	Browser gonna ask load balancer, and LB check redis machine and then check user's list in redis. one redis machine out of three will respond.

* Ranking of feeds:

* Scale the system:	
